import cv2
import numpy
import random
import time

import numpy as np


class Visual:
    Data=[]
    _unit_width= 10
    _unit_height= 10
    _interval_block= 5
    _interval_time=30
    name=""
    _figure = None
    unfinsh=(255,0,0)
    def __init__(self,Name,Data):
        self.Data=Data
        self.name=Name
    def start(self):
        n=len(self.Data)
        self._figure=np.zeros((n*self._unit_height ,   n*(self._unit_width+self._interval_block),  3),dtype=np.uint8)+255
        for i in range(n):
            self._set_figure(i,self.Data[i],self.unfinsh)
        self.show()
    def showcolor(self,i,j):
        self._set_figure(i, self.Data[i], color=(0, 0, 255))
        self._set_figure(j, self.Data[j], color=(0, 0, 255))
        self.show()
        self._set_figure(i, self.Data[i], color=self.unfinsh)
        self._set_figure(j, self.Data[j], color=self.unfinsh)
        self.show()

    def _set_figure(self,index,val,color=(0,0,0)):
        leftX=index*(self._unit_width+self._interval_block)
        rightX=leftX+self._unit_width
        Y=-1-val*self._unit_height
        self._figure[:,leftX:rightX]=(255,255,255)
        self._figure[Y:,leftX:rightX]=color
    def setValue(self,index,val,color=(0,0,0)):
        self.Data[index]=val
        self._set_figure(index,val,color)
        self.show()
    def swap(self,i,j):
        #first
        self._set_figure(i,self.Data[i],color=(0,0,255))
        self._set_figure(j,self.Data[j],color=(0,0,255))
        self.show()
        #second
        self.Data[i],self.Data[j]=self.Data[j],self.Data[i]
        self._set_figure(i, self.Data[i], color=(0, 0, 255))
        self._set_figure(j, self.Data[j], color=(0, 0, 255))
        self.show()
        #third
        self._set_figure(i, self.Data[i], color=self.unfinsh)
        self._set_figure(j, self.Data[j], color=self.unfinsh)
        self.show()
    def endshow(self,a):
        for j in range(len(a)):
            self._set_figure(j, self.Data[j], color=(0,0, 255))
            self.show()
    def show(self,flag=False):
        cv2.imshow(self.name,self._figure)
        if flag is False:
            cv2.waitKey(self._interval_time)
        else:
            cv2.waitKey(0)
    def finish(self,a):
        self.show(flag=True)
def bubblesort(A):
    for i in range(len(A)):
        flag = False
        for j in range(len(A)-i-1):
            if A[j]>A[j+1]:
                flag=True
                v.swap(j,j+1)
            else:
                v.showcolor(j,j+1)
        if flag is False:
            break
def partion(a,l,r):
    pivot=a[l]
    index=0
    while l<r:
        while l<r and a[r]>=pivot:
            r-=1
        v.swap(l,r)
        while l<r and a[l]<=pivot:
            l+=1
        v.swap(r,l)
    return l
def quicksort(a,l,r):
    if l>r:
        return
    mid=partion(a,l,r)
    quicksort(a,l,mid-1)
    quicksort(a,mid+1,r)
    
d=[i for i in range(50)]
random.shuffle(d)
v=Visual("QuickSort",d)
v.start()
quicksort(d,0,len(d)-1)
v.endshow(d)
v.finish(d)
random.shuffle(d)
v=Visual("BubbleSort",d)
v.start()
bubblesort(d)
v.endshow(d)
v.finish(d)
